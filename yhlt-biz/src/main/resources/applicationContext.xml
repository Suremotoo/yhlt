<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
				http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.xzb.showcase">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.xzb.showcase" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
			</props>
		</property>
	</bean>


	<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
	<!-- <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" -->
	<!-- destroy-method="close"> -->
	<!-- Connection Info -->
	<!-- <property name="driverClassName" value="${jdbc.driver}" /> -->
	<!-- <property name="url" value="${jdbc.url}" /> -->
	<!-- <property name="username" value="${jdbc.username}" /> -->
	<!-- <property name="password" value="${jdbc.password}" /> -->

	<!-- Connection Pooling Info -->
	<!-- <property name="maxActive" value="${jdbc.pool.maxActive}" /> -->
	<!-- <property name="minIdle" value="${jdbc.pool.minIdle}" /> -->
	<!-- <property name="maxIdle" value="${jdbc.pool.maxIdle}" /> -->
	<!-- <property name="defaultAutoCommit" value="false" /> -->

	<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
	<!-- <property name="timeBetweenEvictionRunsMillis" value="60000" /> -->
	<!-- <property name="minEvictableIdleTimeMillis" value="600000" /> -->
	<!-- </bean> -->


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" 
		/> -->

	<!-- 自动扫描并注入Spring Data JPA -->
	<jpa:repositories base-package="com.xzb.showcase"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />


	<!-- 支持文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- MyBatis配置 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
	<!-- <property name="typeAliasesPackage" value="org.springside.examples.showcase.entity" 
		/> -->
	<!-- 显式指定Mapper文件位置 -->
	<!-- <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" 
		/> -->
	<!-- </bean> -->

	<!-- 缓存配置 -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven cache-manager="ehcacheManager" />
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<!-- <bean id="cacheManagerFactory" -->
	<!-- class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> -->
	<!-- <property name="configLocation" value="classpath:ehcache.xml" /> -->
	<!-- </bean> -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"> -->
	<!-- <property name="cacheManager" ref="cacheManagerFactory" /> -->
	<!-- </bean> -->

	<!-- spring datapermission -->
	<bean id="dataPermissionService"
		class="com.xzb.showcase.base.datapermission.DataPermissionServiceAspect"></bean>
	<!-- Spring AOP log -->
	<bean id="logService" class="com.xzb.showcase.base.log.LogServiceAspect"></bean>

	<aop:config>
		<!-- spring datapermission -->
		<aop:pointcut
			expression="execution(* com.xzb.showcase.*.service.*.findOneByParams*(..)) || execution(* com.xzb.showcase.*.service.*.findByParams*(..))"
			id="dataPermissionServicePointcut" />
			
		<!-- Spring AOP log -->
		<aop:pointcut
			expression="execution(* com.xzb.showcase.*.service.*.save*(..)) || execution(* com.xzb.showcase.*.service.*.delete*(..))"
			id="servicePointcut" />
			
		<!-- spring datapermission -->
<!-- 		<aop:aspect id="dataPermission" ref="dataPermissionService"> -->
<!-- 			<aop:before method="dataPermission" pointcut-ref="dataPermissionServicePointcut" /> -->
<!-- 		</aop:aspect> -->
		
		<!-- Spring AOP log -->
		<aop:aspect id="log" ref="logService">
			<aop:around method="logAround" pointcut-ref="servicePointcut" />
		</aop:aspect>
	</aop:config>

</beans>